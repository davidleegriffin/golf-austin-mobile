type Address {
  street: String
  city: String
  state: String
  zipCode: String
}

input AddressInput {
  street: String
  city: String
  state: String
  zipCode: String
}

type CreditCard {
  network: String!
  number: String!
}

input CreditCardInput {
  network: String!
  number: String!
}

type Customer {
  _id: ID!
  lastName: String!
  firstName: String!
  creditCard: CreditCard!
  address: Address!
  telephone: String!
  _ts: Float!
}

input CustomerInput {
  firstName: String!
  lastName: String!
  address: AddressInput!
  telephone: String!
  creditCard: CreditCardInput!
}

type CustomerPage {
  data: [Customer]!
  after: String
  before: String
}

type Mutation {
  createOrder(data: OrderInput!): Order!
  deleteOrder(id: ID!): Order
  updateOrder(
    id: ID!
    data: OrderInput!
  ): Order
  updateCustomer(
    id: ID!
    data: CustomerInput!
  ): Customer
  deleteStore(id: ID!): Store
  submitOrder(customerId: ID!, products: SubmitOrderProductInput): Order!
  createStore(data: StoreInput!): Store!
  deleteCustomer(id: ID!): Customer
  updateStore(
    id: ID!
    data: StoreInput!
  ): Store
  createProduct(data: ProductInput!): Product!
    @graphql(
        endpoint: "https://graphql.us.fauna.com/graphql"
        configuration: "fauna_config"
        )
  updateProduct(
    id: ID!
    data: ProductInput!
  ): Product
  createCustomer(data: CustomerInput!): Customer!
    @graphql(
        endpoint: "https://graphql.us.fauna.com/graphql"
        configuration: "fauna_config"
        )
  createUser(data: UserInput!): User!
    @graphql(
        endpoint: "https://graphql.us.fauna.com/graphql"
        configuration: "fauna_config"
        )
  deleteProduct(id: ID!): Product
}

type Order {
  shipDate: DateTime
  cart: [ProductCart!]!
  _id: ID!
  shipAddress: Address!
  creditCard: CreditCard!
  status: String!
  customer: Customer!
  creationDate: DateTime!
  _ts: Float!
}

input OrderCustomerRelation {
  create: CustomerInput
  connect: ID
}

input OrderInput {
  customer: OrderCustomerRelation
  cart: [ProductCartInput!]!
  status: String!
  creationDate: DateTime!
  shipDate: DateTime
  shipAddress: AddressInput!
  creditCard: CreditCardInput!
}

type OrderPage {
  data: [Order]!
  after: String
  before: String
}

type Product {
  name: String!
  quantity: Int!
  backorderLimit: Int!
  description: String!
  _id: ID!
  price: Float!
  store: Store!
  backordered: Boolean!
  _ts: Float!
}

type ProductCart {
  product: Product!
  quantity: Int!
  price: Float!
}

input ProductCartInput {
  product: ID!
  quantity: Int!
  price: Float!
}

input ProductCartProductRelation {
  create: ProductInput
  connect: ID
}

input ProductInput {
  name: String!
  description: String!
  price: Float!
  store: ProductStoreRelation
  quantity: Int!
  backorderLimit: Int!
  backordered: Boolean!
}

type ProductPage {
  data: [Product]!
  after: String
  before: String
}

input ProductStoreRelation {
  create: StoreInput
  connect: ID
}

type Query {
  findProductByID(id: ID!): Product
  findOrderByID(id: ID!): Order
  allCustomers(
    _size: Int
    _cursor: String
  ): CustomerPage!
  allProducts(
    _size: Int
    _cursor: String
  ): ProductPage!
  @graphql(
      endpoint: "https://graphql.us.fauna.com/graphql"
      configuration: "fauna_config"
    )
  allStores(
    _size: Int
    _cursor: String
  ): StorePage!
  allOrders(
    _size: Int
    _cursor: String
  ): OrderPage!
  findStoreByID(id: ID!): Store
  findCustomerByID(id: ID!): Customer
}

type Store {
  _id: ID!
  _ts: Float!
  name: String!
  address: Address
}

input StoreInput {
  name: String!
  address: AddressInput
}

type StorePage {
  data: [Store]!
  after: String
  before: String
}

input SubmitOrderProductInput {
  productId: ID!
  quantity: Int!
}




type User {
  # The document's ID.
  _id: ID!
  email: String!
  familyName: String!
  givenName: String!
  id: String!
  name: String!
  photoUrl: String!
  # The document's timestamp.
  _ts: Float!
}

input UserInput {
  email: String!
  familyName: String!
  givenName: String!
  id: String!
  name: String!
  photoUrl: String!
}

type UserPage {
  data: [User]!
  after: String
  before: String
}

# mutation MyMutation {
#   createUser(
#     data: {name: "John Doe", photoUrl: "https://picsum.photos/200/300", email: "example@gmail.com", familyName: "Doe", givenName: "John", id: "12345"}
#   ) {
#     email
#     givenName
#     familyName
#     name
#     photoUrl
#   }
# }
